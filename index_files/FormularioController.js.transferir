"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FormularioController = /*#__PURE__*/function () {
  function FormularioController(_idformulario, _endpoint) {
    _classCallCheck(this, FormularioController);

    this._idformulario = _idformulario.replace("___$_", "");
    this._url = "".concat(_endpoint, "/client/formularios/get/").concat(this._idformulario);
    this._campos = new Campos();
    this._inputTextoView = new InputTextoView('#app-chat');
    this._comboOpcoes = new ComboUmaOpcaoView('#app-chat');
    this._comboMultiOpcoes = new ComboMultiplasOpcoesView('#app-chat');
    this._iconeController = new IconeController();
    this._parametrosController = new ParametrosController();
    Object.freeze(this);
  }

  _createClass(FormularioController, [{
    key: "adiciona",
    value: function adiciona() {
      var self = this;

      if (sessionStorage.getItem('nexchatform') == null) {
        fetch(this.url, {
          headers: {
            contentType: 'aplication/json'
          }
        }).then(function (response) {
          if (response.ok) {
            return response.json().then(function (json) {
              sessionStorage.setItem('nexchatform', JSON.stringify(json));
              self.start(json);
            });
          } else {
            console.debug('Network response was not ok.');
          }
        })["catch"](function (error) {
          $('#app-chat').html("<p class='alert alert-danger' style='text-align:center'>Chat indisponível no momento. Tente novamente mais tarde!</p>");
          $('.login_conversation').attr("disabled", true);
          console.debug('There has been a problem with your fetch operation: ' + error.message);
        });
      } else {
        this.start(JSON.parse(sessionStorage.getItem('nexchatform')));
      }
    }
  }, {
    key: "start",
    value: function start(json) {
      if (json.campos.length > 0) {
        this._parametrosController.adicionar(json.params);

        this._parametrosController.mostrarFormularioAoAbrirTela();

        this._parametrosController.mostrarIconesNaTela();

        this._criaCampos(Object.values(json.campos));

        localStorage.setItem('nchatMessages', json.tiposOrigemMensagem);
        var coresController = new CoresController(json.params.corbackground, json.params.cortexto);
        coresController.trocaCor();
      } else if (json.campos.error) {
        console.debug('Formulario not found');
      }

      localStorage.setItem("anexo", json.params.envioanexo);
    }
  }, {
    key: "url",
    get: function get() {
      return this._url;
    }
  }, {
    key: "_criaCampos",
    value: function _criaCampos(formulario) {
      var _this = this;

      formulario.forEach(function (campos) {
        if (campos.nome == "Fila" && !_this._parametrosController.ehDoTipoFila()) {
          return;
        }

        var campo = new Campo(campos.id, campos.idformulario, campos.nome, campos.ordem, campos.form, campos.info, campos.obrigatorio, campos.opcoes);

        _this._campos.adiciona(campo);

        switch (campo.tipo) {
          case 'mensagem':
            break;

          case 'combo':
            _this._comboOpcoes.update(campo);

            break;

          case 'comboMulti':
            _this._comboMultiOpcoes.update(campo);

            $('.selectMulti').select2({
              placeholder: 'Selecione uma opção'
            });
            break;

          default:
            _this._inputTextoView.update(campo);

            break;
        }
      });
    }
  }]);

  return FormularioController;
}();